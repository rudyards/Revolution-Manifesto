- if @pack.is_a?(WeightedPack)
  #{@pack.name} has variants:
  %ul
    - @pack.packs.each do |pack, weight|
      %li
        #{weight}/#{@pack.total_weight} (#{(100.0*weight/@pack.total_weight).round(2)}%)
        %ul
          - pack.sheets.each do |sheet, count|
            %li
              #{count}x Sheet #{sheet.name}
- else
  %div
    #{@pack.name} has no variants:
  %div
    %ul
      - @pack.sheets.each do |sheet, count|
        %li
          #{count}x Sheet #{sheet.name}

- if @pack.is_a?(WeightedPack)
  - sheets = @pack.packs.keys.flat_map(&:sheets).flat_map(&:keys).uniq
- else
  - sheets = @pack.sheets.keys

%div
  = link_to controller: "sealed", set: [params[:id]], count: [6] do
    Explore this pack in Sealed.

%h3 Sheets

- sheets.each do |sheet|
  %h4
    - if sheet.class == ColorBalancedCardSheet
      Sheet #{sheet.name} (color balanced)
    - elsif sheet.class == CardSheetWithDuplicates
      Sheet #{sheet.name} (duplicates allowed)
    - elsif sheet.class == FixedCardSheet
      Sheet #{sheet.name} (fixed content without randomization)
    - else
      Sheet #{sheet.name}
  - if sheet.class == FixedCardSheet
    - groups = sheet.elements.zip(sheet.weights).group_by(&:last).transform_values{|x| x.map(&:first).sort}.sort.reverse
    - groups.each do |count, cards|
      %div
        At count #{count}x
      .row.multicard_row
        - cards.each_with_index do |card, i|
          .col-3.col-sm-2.card_picture_cell
            = link_to_card(card) do
              = render 'card/picture', card: card
  - else
    - groups = sheet.probabilities.group_by(&:last).transform_values{|x| x.map(&:first).sort}.sort.reverse
    - groups.each do |weight, cards|
      %div
        At rate #{weight} (#{(100.0*weight).round(2)}%)
      .row.multicard_row
        - cards.each_with_index do |card, i|
          .col-3.col-sm-2.card_picture_cell
            = link_to_card(card) do
              = render 'card/picture', card: card

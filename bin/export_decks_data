#!/usr/bin/env ruby

require_relative "../search-engine/lib/card_database"

class ExportDecksData
  def initialize
    @db = CardDatabase.load
    @uuids_path = Pathname("#{__dir__}/../index/uuids.txt")
    @token_uuids_path = Pathname("#{__dir__}/../index/token_uuids.txt")
    load_uuids
    load_token_uuids
  end

  def load_uuids
    @uuids = {}
    @uuids_path.each_line do |line|
      s, n, u, _ = line.chomp.split("\t")
      @uuids[s] ||= {}
      raise if @uuids[s][n]
      @uuids[s][n] = u
    end
  end

  def load_token_uuids
    @token_uuids = {}
    @token_uuids_path.each_line do |line|
      s, n, u, _ = line.chomp.split("\t")
      @token_uuids[s] ||= {}
      if @token_uuids[s][n]
        # not supported yet
        @token_uuids[s][n] = :double_sided_token
      else
        @token_uuids[s][n] = u
      end
    end
  end

  def uuid_for(set_code, number)
    @uuids.fetch(set_code).fetch(number)
  end

  def token_uuid_for(set_code, number)
    @token_uuids.fetch(set_code&.downcase).fetch(number)
  rescue
    "not_in_mtgjson"
  end

  def export_card(n, c)
    {
      name: c.name,
      set_code: c.set_code,
      number: c.number,
      foil: c.foil,
      count: n,
      multiverseid: c.main_front.multiverseid,
      mtgjson_uuid: uuid_for(c.set_code, c.number),
    }.compact
  end

  def export_token(count, name, set_code, number, foil)
    {
      name: name,
      set_code: set_code || "unknown",
      number: number || "unknown",
      foil: foil,
      count: count,
      mtgjson_uuid: token_uuid_for(set_code, number),
    }.compact
  end

  def call(output_path)
    exported_data = []
    @db.decks.each do |deck|
      exported_data << {
        name: deck.name,
        type: deck.type,
        category: deck.category,
        format: deck.format,
        set_code: deck.set_code,
        set_name: deck.set_name,
        release_date: deck.release_date,
        cards: deck.cards.map{|n,c| export_card(n, c) },
        sideboard: deck.section("Sideboard").map{|n,c| export_card(n, c) },
        commander: deck.commander.map{|n,c| export_card(n, c) },
        displayCommander: deck.section("Display Commander").map{|n,c| export_card(n, c) },
        planarDeck: deck.section("Planar Deck").map{|n,c| export_card(n, c) },
        schemeDeck: deck.section("Scheme Deck").map{|n,c| export_card(n, c) },
        tokens: deck.tokens.map{|c| export_token(*c) },
      }
    end
    open(output_path, "w") do |fh|
      fh.puts JSON.pretty_generate(exported_data)
    end
  end
end

output_path = ARGV[0] || "export_decks.json"
ExportDecksData.new.call(output_path)

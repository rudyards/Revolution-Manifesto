#!/usr/bin/env ruby

require_relative "../search-engine/lib/card_database"
require "memoist"
require "pry"

class ReportLegalityDifferences
  extend Memoist

  attr_reader :mtgjson_legalities_data, :spoiler_cards, :non_spoiler_cards

  def initialize
    @db = CardDatabase.load
    @mtgjson = JSON.parse(Pathname("#{__dir__}/../tmp/AllSets.json").read)
    load_mtgjson_legalities_data
  end

  # v4 vs v5
  memoize def all_sets
    if @mtgjson.keys.sort == ["data", "meta"]
       @mtgjson["data"]
    else
       @mtgjson
    end
  end

  # This method mostly just verifies and filters out data
  # It's not in very convenient format
  def load_mtgjson_legalities_data
    @mtgjson_legalities_data = {}
    @spoiler_cards = Set[]
    @non_spoiler_cards = Set[]
    all_sets.each do |set_code, set_data|
      # skip spoiler sets, as legality information won't be there yet
      spoiler_set = set_data["isPartialPreview"]
      # Name conflicts
      next if %W[CMB1 CMB2 TBTH].include?(set_code)
      # Cards not legal in any format
      next if %W[CED CEI 30A OAFC OMIC].include?(set_code)
      set_data["cards"].each do |card|
        next if card["isOversized"]
        name = card["faceName"] || card["name"]
        name = alchemy_name_fix(name)
        if spoiler_set
          @spoiler_cards << name
        else
          @non_spoiler_cards << name
        end
        legalities = card["legalities"].dup
        # Various non-legal oversized etc. cards, just ignore them
        next if legalities == {}
        # It's a stupid fake format not following per-card legality rules
        legalities.delete "oldschool"
        @mtgjson_legalities_data[name] ||= legalities
        if @mtgjson_legalities_data[name] != legalities
          warn "Internally inconsistent legalities for #{name}"
          binding.pry
        end
      end
    end
    @spoiler_cards -= @non_spoiler_cards
  end

  memoize def mtgjson_formats
    mtgjson_legalities_data.values.map(&:keys).flatten.uniq.sort
  end

  memoize def mtgjson_format_legalities
    result = {}
    mtgjson_legalities_data.each do |card_name, legalities|
      legalities.each do |format_name, status|
        result[format_name] ||= {}
        result[format_name][card_name] = status.downcase
      end
    end
    result
  end

  def verify_format(name)
    return if Format[name] == FormatUnknown
    format = Format[name].new
    mtgjson_legalities = mtgjson_format_legalities[name]
    db_legalities = @db.cards.values.map{|c| [c.name, format.legality(c)] }.select(&:last).to_h
    card_names = (mtgjson_legalities.keys | db_legalities.keys)

    statuses = []
    card_names.sort.each do |name|
      # This isn't quite sufficient as spoiler set could bring
      # an old card into Standard/Pioneer/Modern/etc.
      next if @spoiler_cards.include?(name)
      a = mtgjson_legalities[name]
      b = db_legalities[name]
      # Just ignore "banned" vs "not in format" distinction
      if (a || "banned") == (b || "banned")
        statuses << [name, a, a]
        next
      end

      # This is technically not a B&R issue
      if a == nil and b == "restricted" and ["alchemy", "historic"].include?(format.format_name)
        b = nil
      end
      if a == "banned" and b == "restricted" and ["alchemy", "historic"].include?(format.format_name)
        b = "banned"
      end
      statuses << [name, a, b]
    end
    differences = statuses.select{|_,a,b| a != b}

    return if differences.empty?

    puts "Format #{name} - #{differences.size} / #{statuses.size} differences"
    differences.sort.each do |name, a, b|
      puts "* #{name} - mtgjson:#{a || 'not it format'} - db:#{b || 'not in format'}"
    end
    puts ""
  end

  def alchemy_name_fix(name)
    return unless name
    name.split(" // ").map{|s|
      if s =~ /\AA-(.*)/
        "#{$1} (Alchemy)"
      else
        s
      end
    }.join(" // ")
  end

  def call
    mtgjson_formats.each do |name|
      verify_format name
    end
  end
end

ReportLegalityDifferences.new.call
